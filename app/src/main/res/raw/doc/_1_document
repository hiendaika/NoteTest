I. Gioi thieu coroutine va lap trinh bat dong bo.
1. Dat van de
- Làm thế nào để ứng dụng không bị block UI, tắc nghẽn khiến cho user ko thể thao tác tiếp tục được.
Thực tế việc này rất dễ xảy ra khi chạy 1 tác vụ nặng trên main thread.
- De giai quyet van de tren ta su dung ky thuat lap trinh bat dong bo:
+ Threading.
+ Thread + Callback/AsycnTask/Handler.
+ Reactive Extension (Rx).
+ Coroutines.

2. Mot so giai phai xu ly bat dong bo.
a. Threading:
- Thuc hien cac tac vu nang trong 1 thread rieng k phai la mainthread
Exp:
    thread(true) {
        executeLongTask()
    }
- Nhuoc diem khi su dung thread:
+ Chi phi cho viec tao 1 thread kha dat.
+ Lam dung thread se anh huong den hieu suat cua ung dung, trai nghiem nguoi dung.
+ So thread la huu han, khi so thread da dc dung da het, trong khi can tao 1 thread moi de
thuc hien cac tac vu khac => dieu nay se gay ra hien tuong tac nghen co chai.
+ Kho su dung thread, debug kho, deadlock va race condition de gap phai neu khong nam ro thread.
+ De giao diem dc giua thread va UI thread ta can ket hop voi callback.

b. Thread + Callbacks / AsyncTask/ Handler.
- Exp su dung callback trong kotlin:
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
        thread(true) {
            executeLongTask { taskDone ->
                textViewTaskName.text = taskDone
            }
        }
    }

    private fun executeLongTask(taskDone: (name: String) -> Unit) {
        taskDone.invoke("Viblo Report")
    }
+ Code se phuc tap hon neu ta su dung cac doan ma callback long nhau
    fun register(newUser: User) {
        val username = newUser.getUsername()
        val password = newUser.getPassword()

        api.register(newUser, object : Callback<Boolean>() {
            fun onResponse(success: Boolean) {
                if (success) {
                    api.login(AuthData(username, password), object : Callback<Token>() {
                        fun onResponse(token: Token) {
                            api.getUser(token, object : Callback<UserDetail>() {
                                fun onResponse(userDetail: UserDetail) {
                                    // cuối cùng cũng đến Tây Thiên, get được userDetail rồi =))
                                }
                            })
                        }
                    })
                }
            }
        })
    }

=> Code viet theo dang nay se mat tham my va kha roi.
Co the viet don gian hon nhu sau

    fun register(newUser: User) {
        val username = newUser.getUsername()
        val password = newUser.getPassword()

        api.register(newUser, { success ->
            if (success) {
                login(username, password)
            }
        })
    }

    private fun login(username: String, password: String) {
        api.login(AuthData(username, password), { token -> getUserDetail(token) })
    }

    private fun getUserDetail(token: Token) {
        api.getUser(token, { userDetail ->
            // get được userDetail
        })
    }
=> De gon dep hon ta co the su dung Rx.

c. Rx
- Voi y/c bai toan tren khi su dung Rx operator thi code se ngan gon nhu sau.
    fun register(newUser: User) {
        val username = newUser.getUsername()
        val password = newUser.getPassword()

        api.register(newUser)
            .filter({ success -> success })
            .flatMap({ success -> api.login(AuthData(username, password)) })
            .flatMap({ token -> api.getUser(token) })
            .subscribe({ userDetails ->
                // get được userDetail
            })
    }
- Su dung rx kha ngan gon nhung thu vien Rx kha lon va kha kho su dung voi nhung ng moi.

d. Kotlin Couroutine
    fun getTokenAndLogin() {
    // launch a coroutine
        GlobalScope.launch {
            val token = getToken() // hàm getToken() này được chạy bất đồng bộ
            login(token)           // thế nhưng cách viết code lại giống như đang viết code đồng bộ (code từ trên xuống)
        }
    }

    suspend fun getToken(): String {
        // makes a request and suspends the coroutine
        return suspendCoroutine {
            // handle and return token
            it.resume("AdfGhhafHfjjryJjrtthhhFbgyhJjrhhBfrhghrjjyGHj")
        }
    }

    private fun login(token: String) {
        // TODO login with token
    }
- Ưu điểm của coroutine:
+ Về cơ bản có thể hiểu coroutine như là 1 light-weight thread, nhưng nó không phải 1 thread, chúng chỉ hoạt động tương tự
như 1 thread.
+ Hàng nghìn coroutine co the duoc chay cùng 1 lúc, còn nếu hàng ngàn thread chạy cùng 1 lúc thì sẽ gây ảnh hưởng đến hiệu suất
của ứng dụng, cái giá phải trả sẽ là rất đắt.
- Việc code xử lý bất đồng bộ rất lộn xộn rất khó debug, còn với kotlin coroutine việc code đc viết như xử lý dồng bộ, từ trên
xuống mà k cần phải có bất kỳ cú pháp đặc biệt nào ngoài việc sử dụng 1 hàm launch - hàm này giúp khởi động coroutine.
- Function xử lý task bất đồng bộ đc viết giống task xử lý đồng bộ chỉ khác là trong function có chứa từ khoá suspend.
- Có thể return bất kỳ giá trị nào mà chúng ta mong muốn.


fun main() = runBlocking {
    val startTime = System.currentTimeMillis()
    val job = launch(Dispatchers.Default) {
        var nextPrintTime = startTime
        var i = 0
        while (i < 5) {
            if (System.currentTimeMillis() >= nextPrintTime) {
                println("job: I<m sleeping ${i++} ...")
                nextPrintTime += 500L
            }
        }
    }
    delay(1300L) // delay a bit
    println("main: I<m tired of waiting!")
    job.cancel() // cancels the job
    println("main: Now I can quit.")
}
