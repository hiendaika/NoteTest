III. Bai 3 Coroutine Context va Dispatcher
1. Coroutine Context.
- Moi coroutine trong Kotlin deu co 1 context duoc the hien bang 1 instance cua interface CoroutineContext. Context nay la
1 tap hop cac element cau hinh cho coroutine.
a. Element
- Cac loai Element trong coroutine gom:
* Job: Nam giu thong tin ve lifecycle cua coroutine.
* Dispatcher: Quyet dinh thread ma coroutine se chay tren do. Co cac loai dispatcher sau:
- Dispatchers.Main: Chay tren UI thread.
- Dispatchers.IO: chay tren background thread cua thread pool. Thuong dung khi read, write files, database, Networking.
- Dispatchers.Default: Chay tren background thread cua thread pool thuong dung khi sorting list, parse Json, DiffUtils.
- newSingleThreadContext(""name_thread"): Chay tren 1 thread do ta tu dat ten.
- newFixThreadPoolContext(3,"name_thread"): Su dung 3 thread trong shared background thread pool
=> Job va Dispatchers la 2 element chinh trong CoroutineContext. Ngoai ra con co 1 so element khac nhu:
- CoroutineName("name"): Dat ten cho coroutine.
- NonCancellable: K the cancel ke ca khi goi cancel coroutine

b. Toan tu plus(+) de them cac element vao coroutineContext.
-  Su dung toan tu + de them cac element cho coroutineContext nhu sau:
   // set context khi sử dụng runBlocking { } để start coroutine
   runBlocking(Dispatchers.IO + Job()) {
   }

// hoặc set context khi sử dụng launch { } để start coroutine
  GlobalScope.launch(newSingleThreadContext("demo_thread") + CoroutineName("demo_2") + NonCancellable) {
  }

c. Default Context
- Neu k set coroutine context cho coroutine thi mac dinh no se nhan Dispatchers.Default lam dispatcher va tao ra 1 Job() de quan ly 1 coroutine
  GlobalScope.launch {
    // tương đương với GlobalScope.launch (Dispatchers.Default + Job()) { }
  }

d. Get coroutine context qua bien coroutineContext
- get coroutine context thong qua property: coroutineContext trong moi coroutine.
  fun main() = runBlocking<Unit> {
    println("My context is: $coroutineContext")
  }
- Them cac element vao coroutineContext bang cach su dung toan tu cong +
  fun main() = runBlocking<Unit> {
    println("A context with name: ${coroutineContext + CoroutineName("test")}")
  }

2. Ham withContext
- La 1 suspend function cho phep coroutine chay code trong block vs 1 context cu the do ta quy dinh.
  fun main() {
  newSingleThreadContext("thread1").use { ctx1 ->
  // tạo một context là ctx1 chứ chưa launch coroutine.
  // ctx1 sẽ có 1 element là dispatcher quyết định coroutine sẽ chạy trên 1 thread tên là thread1
  println("ctx1 - ${Thread.currentThread().name}")

   		newSingleThreadContext("thread2").use { ctx2 ->
             // tạo một context là ctx2 chứ vẫn chưa launch coroutine
             // ctx2 sẽ có 1 element là dispatcher quyết định coroutine sẽ chạy trên 1 thread tên là thread2
       		println("ctx2 - ${Thread.currentThread().name}")

            // bắt đầu chạy coroutine với context là ctx1
       		runBlocking(ctx1) {
                    // coroutine đang chạy trên context ctx1 và trên thread thread1
           			println("Started in ctx1 - ${Thread.currentThread().name}")

                    // sử dụng hàm withContext để chuyển đổi context từ ctx1 qua ctx2
           			withContext(ctx2) {
                        // coroutine đang chạy với context ctx2 và trên thread thread2
               			println("Working in ctx2 - ${Thread.currentThread().name}")
           			}

                    // coroutine đã thoát ra block withContext nên sẽ chạy lại với context ctx1 và trên thread thread1
           			println("Back to ctx1 - ${Thread.currentThread().name}")
       		}
   		}

  		println("out of ctx2 block - ${Thread.currentThread().name}")
   	}

  println("out of ctx1 block - ${Thread.currentThread().name}")
  }
=> Output ra
  ctx1 - main
  ctx2 - main
  Started in ctx1 - thread1
  Working in ctx2 - thread2
  Back to ctx1 - thread1
  out of ctx2 block - main
  out of ctx1 block - main
- Cong dung cua ham withContext se duoc su dung hau het trong cac du an. Cu the ta se get data duoi background thread va can UI thread de
update UI.
  GlobalScope.launch(Dispatchers.IO) {
    // do background task
    withContext(Dispatchers.Main) {
      // update UI
    }
  }

3. Cac loai Dispatcher trong Coroutine
a. Dispatchers va Threads
- VD cac loai dispatchers
  fun main() = runBlocking<Unit> {
      launch(Dispatchers.Unconfined) { // not confined -- will work with main thread
          println("Unconfined            : I<m working in thread ${Thread.currentThread().name}")
      }
      launch(Dispatchers.Default) { // will get dispatched to DefaultDispatcher
          println("Default               : I<m working in thread ${Thread.currentThread().name}")
      }
      launch(newSingleThreadContext("MyOwnThread")) { // will get its own new thread
          println("newSingleThreadContext: I<m working in thread ${Thread.currentThread().name}")
      }
  }
=> Output
  Unconfined            : I<m working in thread main
  Default               : I<m working in thread DefaultDispatcher-worker-1
  newSingleThreadContext: I<m working in thread MyOwnThread
=> Ket qua in ra khi chay Default va newSingleThreadContext chinh xac nhung gi da de cap con Unconfined lai in ra ket qua Main
  thread giong Dispatchers.Main.

- Unconfined Dispatchers khac Main
  fun main() = runBlocking {
    launch(Dispatchers.Unconfined) { // chưa được confined (siết lại) nên nó sẽ chạy trên main thread
      println("Unconfined      : I<m working in thread ${Thread.currentThread().name}")
      delay(1000)
      // hàm delay() sẽ làm coroutine bị suspend sau đó resume lại
      println("Unconfined      : After delay in thread ${Thread.currentThread().name}")
    }
  }
=> Output la:
  Unconfined      : I<m working in thread main
  Unconfined      : After delay in thread kotlinx.coroutines.DefaultExecutor
  Ban dau coroutine chay tren Main thread nhung sau khi delay 1s thi chay tiep tren background thread
+ Boi vi dispatcher Unconfined nay chay 1 coroutine k gioi han bat ky thread cu the nao.
+ Ban dau coroutine chua dc confined thi no se chay tren current thread - Current thread la main thread nen no se chay tren mainthread.
+ Cho den khi no bi suspend (su dung delay de suspend).
+ Sau khi coroutine do bi resume thi no se khong chay tren current thread nua ma chay tren background thread.

4. Dat ten cho coroutine
- Su dung element CoroutineName de dat ten cho coroutine
  GlobalScope.launch(CoroutineName("demo_2")) {
    // coroutine được đặt tên là demo_2
  }